#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <HardwareSerial.h>
#include <cppQueue.h>


// WiFi credentials
const char* ssid = YOUR_SSID;
const char* password = YOUR_PASSWORD;

// MQTT Broker details
const char* mqtt_broker = BROKER;
const char* mqtt_username = "bose-soundbar";
const char* mqtt_password = BROKER_PASSWORD;
const char* mqtt_homeassistant_status_topic = "homeassistant/status";
const char* mqtt_command_topic = "homeassistant/number/tv_volume/set";
const char* mqtt_state_topic = "homeassistant/number/tv_volume/state";
const char* mqtt_config_topic = "homeassistant/number/tv_volume/config";

WiFiClient espClient;
PubSubClient mqttClient(espClient);

HardwareSerial mySerial(1);

bool consoleReady = true;

struct CommandPacket {
  byte length;
  byte status;
  byte opCode1;
  byte opCode2;
  byte payload1;
  byte payload2;
  byte checksum;
};

const byte STATUS_ERROR_MASK = 0b10000000;
const byte STATUS_NOTIFICATION_MASK = 0b1000;
const byte STATUS_DIRECTION_MASK = 0b10;

const byte BOSE_VOLUME_DOWN = 0x02;
const byte BOSE_VOLUME_UP = 0x03;

const byte OP_1_READY = 0x01;
const byte OP_2_READY = 0x00;

#define MAX_BUFFER_SIZE 20
byte buffer[MAX_BUFFER_SIZE];

cppQueue commandQueue(sizeof(CommandPacket), 20, FIFO, true);  // Size of 20, FIFO type, overwrite true

void printCommandPacket(const CommandPacket& packet) {
  Serial.print("Packet Length: 0x");
  Serial.print(packet.length, HEX);
  Serial.print(", Status: 0x");
  Serial.print(packet.status, HEX);
  Serial.print(", OpCode1: 0x");
  Serial.print(packet.opCode1, HEX);
  Serial.print(", OpCode2: 0x");
  Serial.print(packet.opCode2, HEX);
  Serial.print(", Payload1: 0x");
  Serial.print(packet.payload1, HEX);
  Serial.print(", Payload2: 0x");
  Serial.print(packet.payload2, HEX);
  Serial.print(", Checksum: 0x");
  Serial.println(packet.checksum, HEX);
}


void processCommandQueue() {
  if (consoleReady) {
    if (!commandQueue.isEmpty()) {
      CommandPacket packet;
      if (commandQueue.pop(&packet)) {
        Serial.println("--- Sending Packet ---");
        printCommandPacket(packet);
        mySerial.write(packet.length);
        mySerial.write(packet.status);
        mySerial.write(packet.opCode1);
        mySerial.write(packet.opCode2);
        mySerial.write(packet.payload1);
        mySerial.write(packet.payload2);
        mySerial.write(packet.checksum);
        consoleReady = false;  // Reset the ready flag after sending a command
        Serial.println("--- Finished Sending Packet ---");
      }
    }
  }
}


void queueCommand(byte opCode1, byte opCode2, byte payload1, byte payload2) {
  byte length = 0x07;                                                         // Total packet length
  byte status = 0x00;                                                         // Status must be 0
  byte checksum = length ^ status ^ opCode1 ^ opCode2 ^ payload1 ^ payload2;  // Calculate checksum

  mySerial.write(length);
  mySerial.write(status);
  mySerial.write(opCode1);
  mySerial.write(opCode2);
  mySerial.write(payload1);
  mySerial.write(payload2);
  mySerial.write(checksum);

  CommandPacket packet = { length, status, opCode1, opCode2, payload1, payload2, checksum };
  Serial.println("--- Queueing Command ---");
  printCommandPacket(packet);
  if (commandQueue.push(&packet)) {
    Serial.println("Command queued.");
  } else {
    Serial.println("Queue full or failed to enqueue command.");
  }
  Serial.println("--- Finished Queueing Command ---");
}


// Function to set the volume (implementation placeholder)
void setVolume(int volume) {
  if (volume < 0) volume = 0;
  if (volume > 30) volume = 30;

  byte volumeLevel = (byte)volume;
  queueCommand(0x01, 0x15, 0x01, volumeLevel);
  Serial.print("Volume level (hex): ");
  Serial.println(volume, HEX);
}

void queryMainRoomVolume() {
  queueCommand(0x01, 0x15, 0x00, 0x1E);

  Serial.println("Query sent for Main Room Volume.");
}

void enableHardKeyPressNotifications() {
  queueCommand(0x01, 0x1B, 0x01, 0x0D);

  Serial.println("Enable Hard Key Notifications command sent");
}

void querySystemReady() {
  queueCommand(0x01, 0x1D, 0x00, 0x00);

  Serial.println("Query system ready command sent");
}

// Publish MQTT Discovery Configuration
void publishDiscoveryConfig() {
  StaticJsonDocument<512> doc;
  doc["name"] = "Bose Volume";
  doc["command_topic"] = mqtt_command_topic;
  doc["state_topic"] = mqtt_state_topic;
  doc["min"] = 0;
  doc["max"] = 100;
  doc["step"] = 1;
  doc["unique_id"] = "bose_tv_volume";
  doc["device"]["name"] = "Bose Controller";
  doc["device"]["manufacturer"] = "Generic";
  doc["device"]["model"] = "ESP32";
  doc["device"]["identifiers"] = "esp32_001";

  char buffer[512];

  serializeJson(doc, buffer);
  Serial.println(buffer);

  if (mqttClient.publish(mqtt_config_topic, buffer, false)) {
    Serial.println("Discovery configuration published successfully.");
  } else {
    Serial.println("Failed to publish discovery configuration.");
  }
}

void publishVolumeChange(uint8_t volume){
  if (mqttClient.publish(mqtt_state_topic, String(volume).c_str(), false)) {
    Serial.println("State update published successfully.");
  } else {
    Serial.println("Failed to publish state update.");
  }
}

// Callback function to handle incoming MQTT commands
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  if (String(topic) == mqtt_command_topic) {
    int volume = message.toInt();
    setVolume(volume);
    // Publish state back to Home Assistant
    mqttClient.publish(mqtt_state_topic, message.c_str(), true);
  } else if (String(topic) == mqtt_homeassistant_status_topic) {
    publishDiscoveryConfig();
  }
}

// Function to connect to WiFi
void setupWifi() {
  Serial.print("Connecting to WiFi..");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

// Function to reconnect to MQTT broker
void reconnect() {
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (mqttClient.connect("ESP32Client", mqtt_username, mqtt_password)) {
      Serial.println("connected");
      mqttClient.subscribe(mqtt_command_topic);
      mqttClient.subscribe(mqtt_homeassistant_status_topic);
      // Publish the discovery configuration after successful connection
      publishDiscoveryConfig();
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void handleReadyPacket(uint8_t* packet) {
  Serial.println("Ready Packet Received");
  consoleReady = true;
}

void handleResponsePacket(uint8_t* packet) {
  uint8_t opcode_1 = packet[2];  // Assuming big-endian for opcode
  uint8_t opcode_2 = packet[3];

  if(opcode_1 == 0x01 && opcode_2 == 0x15){
    uint8_t volume = packet[4];
    Serial.print("System volume: ");
    Serial.print(volume);
    Serial.println();
    publishVolumeChange(volume);
  } else {
    Serial.print("Response Packet Received with OpCode: ");
  Serial.print(opcode_1);
  Serial.print(opcode_2);
  Serial.println();
  }

  
}

void handleErrorPacket(uint8_t* packet) {
  Serial.print("Error Packet Received with Error Code: ");
  Serial.println((packet[5] << 8) | packet[4], HEX);  // Display error code
}

void handleNotificationPacket(uint8_t* packet) {
  uint8_t keyState = packet[4]; // 0 for pressed, 1 for release
  uint8_t keyCode = packet[6];

  if(keyState == 1){
    queryMainRoomVolume();
  }
  
  Serial.print("Notification Packet Received with Type: ");
  Serial.println(packet[4], HEX);  // Display notification type
}

void handleSerialInput() {
  if (mySerial.available()) {
    Serial.println("--- Receiving Packet ---");
    // Read the length of the packet
    uint8_t length = mySerial.read();

    Serial.print("Length: ");
    Serial.println(length);

    // Read the rest of the packet
    uint8_t packet[length];
    packet[0] = length;
    while (mySerial.available() < length - 1) {
      delay(10);  // Small delay to allow buffer to fill
    }

    for (int i = 1; i < length; i++) {
      packet[i] = mySerial.read();
    }

    Serial.print("Packet: ");
    for (int i = 0; i < length; i++) {
      Serial.print(packet[i], HEX);
      Serial.print(" ");
    }
    Serial.println();

    uint8_t status = packet[1];
    uint8_t opcode_1 = packet[2];  // Assuming big-endian for opcode
    uint8_t opcode_2 = packet[3];



    if ((status & STATUS_ERROR_MASK) != 0) {  // Check Error bit
      handleErrorPacket(packet);
    } else if ((status & STATUS_NOTIFICATION_MASK) != 0) {  // Check Notification bit
      handleNotificationPacket(packet);
    } else if (opcode_1 == OP_1_READY && opcode_2 == OP_2_READY) {  // Ready Packet
      handleReadyPacket(packet);
    } else {  // Assume Response Packet
      handleResponsePacket(packet);
    }

    

    Serial.println("--- Finished Receiving Packet ---");
  }
}


void setup() {
  Serial.begin(115200);
  mySerial.begin(19200, SERIAL_8N1, 16, 17);
  setupWifi();
  mqttClient.setServer(mqtt_broker, 1883);
  mqttClient.setCallback(mqttCallback);
  mqttClient.setBufferSize(512);
  //querySystemReady();
  enableHardKeyPressNotifications();
}

void loop() {
  if (!mqttClient.connected()) {
    reconnect();
  }
  mqttClient.loop();
  handleSerialInput();
  processCommandQueue();
}
